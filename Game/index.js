/*因为游戏界面的每个元素都是一个colored box，所以可以通过操作dom元素，
改变它们的样式来渲染出整个界面，其中元素分为动态的和静态的，静态的包括wall、
lava、empty，动态的包括coin、player、lava，动态的被称为actor，储存在数组
对象中，静态的储存在字符串数组中。*/
/* level使用levelChars对象用于翻译地图中的字符串
   当type是actor的时候就创造一个实例对象，添加到startActor中，
   然后向背景方格中返回empty*/

/* 为了绘制出整个游戏，需要创建一个坐标系，它左上角为(0,0) */
class Vec {
    constructor(x, y) {
      this.x = x; this.y = y;
    }
    //？？？？？？ohter是啥
    plus(other) {
      return new Vec(this.x + other.x, this.y + other.y);
    }
    //速度矢量乘以时间以获得该段时间内行进的距离
    times(factor) {
      return new Vec(this.x * factor, this.y * factor);
    }
}

//1、玩家
class Player {
    //位置 + 速度(模拟动量和重力)
    constructor(pos, speed) {
      this.pos = pos;
      this.speed = speed;
    }
    //player、coin、lava字符串，绘制方块时是根据type来绘制的，所以要定义其type
    get type() { return "player"; }
    //static 关键字定义静态方法？？？？？
    static create(pos) {
        //玩家是半格子高度，为了与@对齐要移动
        return new Player(pos.plus(new Vec(0, -0.5)),
                        new Vec(0, 0));
    }
}
//玩家大小
Player.prototype.size = new Vec(0.8, 1.5);

const playerXSpeed = 7;
const gravity = 30;
const jumpSpeed = 17;

//玩家运动位置的更新
Player.prototype.update = function(time, state, keys) {
    //水平方向左右移动
    let xSpeed = 0;
    if (keys.ArrowLeft) xSpeed -= playerXSpeed;
    if (keys.ArrowRight) xSpeed += playerXSpeed;
    let pos = this.pos;
    let movedX = pos.plus(new Vec(xSpeed * time, 0));
    //如果没有墙阻碍player到新位置，那就继续，否则保留旧位置
    if (!state.level.touches(movedX, this.size, "wall")) {
        pos = movedX;
    }
    //垂直方向模拟跳跃和重力
    //模拟重力
    let ySpeed = this.speed.y + time * gravity;
    let movedY = pos.plus(new Vec(0, ySpeed * time));
    //再次检查是否击中墙壁
    //如果没有击中，到达新位置
    if (!state.level.touches(movedY, this.size, "wall")) {
        pos = movedY;
    }
    //当按下向上的箭头并且player向下移动时意味着wall在player之下，此时跳跃
    else if (keys.ArrowUp && ySpeed > 0) {
        ySpeed = -jumpSpeed;
    } 
    //否则速度为0
    else {
        ySpeed = 0;
    }
    return new Player(pos, new Vec(xSpeed, ySpeed));
};

//2、lava
class Lava {
    //动态熔岩以当前速度向前行进，直到遇到障碍物
    constructor(pos, speed, reset) {
      this.pos = pos;
      this.speed = speed;
      //如果它有reset属性，它将跳回到开始位置(滴水)，如果没有它将反转回另一个位置
      this.reset = reset;
    }
    //type类型：lava
    get type() { return "lava"; }
  
    static create(pos, ch) {
      if (ch == "=") {
        return new Lava(pos, new Vec(2, 0));
      } else if (ch == "|") {
        return new Lava(pos, new Vec(0, 2));
      } else if (ch == "v") {
        return new Lava(pos, new Vec(0, 3), pos);
      }
    }
}

Lava.prototype.size = new Vec(1, 1);

//更新lava的位置
Lava.prototype.update = function(time, state) {
    //步长 * 时间 = 路程，将路程添加到其旧位置
    let newPos = this.pos.plus(this.speed.times(time));
    if (!state.level.touches(newPos, this.size, "wall")) {
    　  //如果不存在障碍物，继续
        return new Lava(newPos, this.speed, this.reset);
    } else if (this.reset) {
        //滴落熔岩向后跳跃
        return new Lava(this.reset, this.speed, this.reset);
    } else {
        //弹跳熔岩速度乘以 -1 反转速度
        return new Lava(this.pos, this.speed.times(-1));
    }
};

//触摸lava，state为lost
Lava.prototype.collide = function(state) {
  return new State(state.level, state.actors, "lost");
};

//3、coin
class Coin {
    //coin不是坐着不动，而是有垂直的抖动过程，所以有用于计算pos(coin的实际位置)的basepos和wobble属性
    constructor(pos, basePos, wobble) {
      this.pos = pos;
      this.basePos = basePos;
      this.wobble = wobble;
    }
    //定义coin的type类型
    get type() { return "coin"; }
  
    static create(pos) {
      let basePos = pos.plus(new Vec(0.2, 0.1));
      //为了避免所有的coin一起抖动，所以乘以Math.randow()使得coin的起始位置是随机的
      return new Coin(basePos, basePos,
                      Math.random() * Math.PI * 2);
    }
}

//定义coin抖动的速度和距离
const wobbleSpeed = 8, wobbleDist = 0.07;

//coin在自己的方格内抖动：以下为实现抖动和定义coin的位置
Coin.prototype.update = function(time) {
  let wobble = this.wobble + time * wobbleSpeed;
  let wobblePos = Math.sin(wobble) * wobbleDist;
  return new Coin(this.basePos.plus(new Vec(0, wobblePos)),
                  this.basePos, wobble);
};

//coin大小
Coin.prototype.size = new Vec(0.6, 0.6);  

//触摸coin，coin消失
Coin.prototype.collide = function(state) {
    let filtered = state.actors.filter(a => a != this);
    let status = state.status;
    //当触摸的coin是最后一个时，state为won
    if (!filtered.some(a => a.type == "coin")) status = "won";
    return new State(state.level, filtered, status);
};



  var GAME_LEVELS = [`                                                    

................................................................................

................................................................................

................................................................................

................................................................................

................................................................................

................................................................................

..................................................................###...........

...................................................##......##....##+##..........

....................................o.o......##..................#+++#..........

.................................................................##+##..........

...................................#####..........................#v#...........

............................................................................##..

..##......................................o.o................................#..

..#.....................o....................................................#..

..#......................................#####.............................o.#..

..#..........####.......o....................................................#..

..#..@.......#..#................................................#####.......#..

..############..###############...####################.....#######...#########..

..............................#...#..................#.....#....................

..............................#+++#..................#+++++#....................

..............................#+++#..................#+++++#....................

..............................#####..................#######....................

................................................................................

................................................................................

`,`                                                                     

................................................................................

................................................................................

....###############################.............................................

...##.............................##########################################....

...#.......................................................................##...

...#....o...................................................................#...

...#................................................=.......................#...

...#.o........################...................o..o...........|........o..#...

...#.........................#..............................................#...

...#....o....................##########.....###################....##########...

...#..................................#+++++#.................#....#............

...###############....oo......=o.o.o..#######.###############.#....#............

.....#...............o..o.............#.......#......#........#....#............

.....#....................#############..######.####.#.########....########.....

.....#.............########..............#...........#.#..................#.....

.....#..........####......####...#####################.#..................#.....

.....#........###............###.......................########....########.....

.....#.......##................#########################......#....#............

.....#.......#................................................#....#............

.....###......................................................#....#............

.......#...............o...........................................#............

.......#...............................................o...........#............

.......#########......###.....############.........................##...........

.............#..................#........#####....#######.o.........########....

.............#++++++++++++++++++#............#....#.....#..................#....

.............#++++++++++++++++++#..........###....###...####.o.............#....

.............####################..........#........#......#.....|.........#....

...........................................#++++++++#......####............#....

...........................................#++++++++#.........#........@...#....

...........................................#++++++++#.........##############....

...........................................##########...........................

................................................................................

`,`

......................................#++#........................#######....................................#+#..

......................................#++#.....................####.....####.................................#+#..

......................................#++##########...........##...........##................................#+#..

......................................##++++++++++##.........##.............##...............................#+#..

.......................................##########++#.........#....................................o...o...o..#+#..

................................................##+#.........#.....o...o....................................##+#..

.................................................#+#.........#................................###############++#..

.................................................#v#.........#.....#...#........................++++++++++++++##..

.............................................................##..|...|...|..##............#####################...

..............................................................##+++++++++++##............v........................

...............................................................####+++++####......................................

...............................................#.....#............#######........###.........###..................

...............................................#.....#...........................#.#.........#.#..................

...............................................#.....#.............................#.........#....................

...............................................#.....#.............................##........#....................

...............................................##....#.............................#.........#....................

...............................................#.....#......o..o.....#...#.........#.........#....................

...............#######........###...###........#.....#...............#...#.........#.........#....................

..............##.....##.........#...#..........#.....#.....######....#...#...#########.......#....................

.............##.......##........#.o.#..........#....##...............#...#...#...............#....................

.....@.......#.........#........#...#..........#.....#...............#...#...#...............#....................

....###......#.........#........#...#..........#.....#...............#...#####...######......#....................

....#.#......#.........#.......##.o.##.........#.....#...............#.....o.....#.#.........#....................

++++#.#++++++#.........#++++++##.....##++++++++##....#++++++++++.....#.....=.....#.#.........#....................

++++#.#++++++#.........#+++++##.......##########.....#+++++++##+.....#############.##..o.o..##....................

++++#.#++++++#.........#+++++#....o.................##++++++##.+....................##.....##.....................

++++#.#++++++#.........#+++++#.....................##++++++##..+.....................#######......................

++++#.#++++++#.........#+++++##.......##############++++++##...+..................................................

++++#.#++++++#.........#++++++#########++++++++++++++++++##....+..................................................

++++#.#++++++#.........#++++++++++++++++++++++++++++++++##.....+..................................................

`,`

..............................................................................................................

..............................................................................................................

..............................................................................................................

..............................................................................................................

..............................................................................................................

........................................o.....................................................................

..............................................................................................................

........................................#.....................................................................

........................................#.....................................................................

........................................#.....................................................................

........................................#.....................................................................

.......................................###....................................................................

.......................................#.#.................+++........+++..###................................

.......................................#.#.................+#+........+#+.....................................

.....................................###.###................#..........#......................................

......................................#...#.................#...oooo...#.......###............................

......................................#...#.................#..........#......#+++#...........................

......................................#...#.................############.......###............................

.....................................##...##......#...#......#................................................

......................................#...#########...########..............#.#...............................

......................................#...#...........#....................#+++#..............................

......................................#...#...........#.....................###...............................

.....................................##...##..........#.......................................................

......................................#...#=.=.=.=....#............###........................................

......................................#...#...........#...........#+++#.......................................

......................................#...#....=.=.=.=#.....o......###.......###..............................

.....................................##...##..........#.....................#+++#.............................

..............................o...o...#...#...........#.....#................##v........###...................

......................................#...#...........#..............#.................#+++#..................

.............................###.###.###.###.....o.o..#++++++++++++++#...................v#...................

.............................#.###.#.#.###.#..........#++++++++++++++#........................................

.............................#.............#...#######################........................................

.............................##...........##.........................................###......................

..###.........................#.....#.....#.........................................#+++#................###..

..#.#.........................#....###....#..........................................###.................#.#..

..#...........................#....###....#######........................#####.............................#..

..#...........................#...........#..............................#...#.............................#..

..#...........................##..........#..............................#.#.#.............................#..

..#.......................................#.......|####|....|####|.....###.###.............................#..

..#................###.............o.o....#..............................#.........###.....................#..

..#...............#####.......##..........#.............................###.......#+++#..........#.........#..

..#...............o###o.......#....###....#.............................#.#........###..........###........#..

..#................###........#############..#.oo.#....#.oo.#....#.oo..##.##....................###........#..

..#......@..........#.........#...........#++#....#++++#....#++++#....##...##....................#.........#..

..#############################...........#############################.....################################..

..............................................................................................................

..............................................................................................................

`,`

..................................................................................................###.#.......

......................................................................................................#.......

..................................................................................................#####.......

..................................................................................................#...........

..................................................................................................#.###.......

..........................o.......................................................................#.#.#.......

.............................................................................................o.o.o###.#.......

...................###................................................................................#.......

.......+..o..+................................................#####.#####.#####.#####.#####.#####.#####.......

.......#.....#................................................#...#.#...#.#...#.#...#.#...#.#...#.#...........

.......#=.o..#............#...................................###.#.###.#.###.#.###.#.###.#.###.#.#####.......

.......#.....#..................................................#.#...#.#...#.#...#.#...#.#...#.#.....#.......

.......+..o..+............o..................................####.#####.#####.#####.#####.#####.#######.......

..............................................................................................................

..........o..............###..............................##..................................................

..............................................................................................................

..............................................................................................................

......................................................##......................................................

...................###.........###............................................................................

..............................................................................................................

..........................o.....................................................#......#......................

..........................................................##.....##...........................................

.............###.........###.........###.................................#..................#.................

..............................................................................................................

.................................................................||...........................................

..###########.................................................................................................

..#.........#.o.#########.o.#########.o.##................................................#...................

..#.........#...#.......#...#.......#...#.................||..................#.....#.........................

..#..@......#####...o...#####...o...#####.....................................................................

..#######.....................................#####.......##.....##.....###...................................

........#=..................=................=#...#.....................###...................................

........#######################################...#+++++++++++++++++++++###+++++++++++++++++++++++++++++++++++

..................................................############################################################

..............................................................................................................

`];
//有关绘制图像：
class Level {
    constructor(plan) {
      let rows = plan.trim().split("\n").map(l => [...l]);
      this.height = rows.length;
      this.width = rows[0].length;
      this.startActors = [];
  
      this.rows = rows.map((row, y) => {
        return row.map((ch, x) => {
          let type = levelChars[ch];
          if (typeof type == "string") return type;
          this.startActors.push(
            type.create(new Vec(x, y), ch));
          return "empty";
        });
      });
    }
}

//绘图字符串识别
const levelChars = {
  ".": "empty", "#": "wall", "+": "lava",
  "@": Player, "o": Coin,
  "=": Lava, "|": Lava, "v": Lava
};

//定义一个DOMDisplay，因为我们是使用DOM元素来展示level的
class DOMDisplay {
    constructor(parent, level) {
      //背景网络只会被绘制一次，而actor会在每次位置更新的时候重新绘制
      this.dom = elt("div", {class: "game"}, drawGrid(level));//利用上面封装的函数添加新元素
      this.actorLayer = null;//该actorLayer属性将用于跟踪包含actor的元素，以便可以轻松删除和替换它们。
      parent.appendChild(this.dom);//appendChild()方法可向节点的子节点列表的末尾添加新的子节点。
    }
  
    clear() { this.dom.remove(); }//clear就是remove()方法代称
  }

//封装了一个函数(创建元素并为其添加属性和子节点)
function elt(name, attrs, ...children) {
  let dom = document.createElement(name);//createElement() 方法通过指定名称创建一个元素

  for (let attr of Object.keys(attrs)) {
    //setAttribute() 方法添加指定的属性，并为其赋指定的值。如果这个指定的属性已存在，则仅设置/更改值。
    dom.setAttribute(attr, attrs[attr]);//element.setAttribute(添加的属性的名称,希望添加的属性值)
  }

  for (let child of children) {
    dom.appendChild(child);//appendChild()方法可向节点的子节点列表的末尾添加新的子节点。
  }
  return dom;
}

//测量常数给出单个网格在屏幕上所占的像素数
const scale = 20;

function drawGrid(level) {
  return elt("table", {
    class: "background",
    style: `width: ${level.width * scale}px`
  }, ...level.rows.map(row =>
    elt("tr", {style: `height: ${scale}px`},
        ...row.map(type => elt("td", {class: type})))
  ));
}

/*我们创建任何一个actor都是通过创建一个DOM元素并且根据该DOM元素的属性来设置其位置和大小，
而这些值必须通过乘以scale来达到从游戏网格单位到像素单位的转化*/
function drawActors(actors) {
  return elt("div", {}, ...actors.map(actor => {
    let rect = elt("div", {class: `actor ${actor.type}`});
    rect.style.width = `${actor.size.x * scale}px`;
    rect.style.height = `${actor.size.y * scale}px`;
    rect.style.left = `${actor.pos.x * scale}px`;
    rect.style.top = `${actor.pos.y * scale}px`;
    return rect;
  }));
}

//syncstate方法用于显示给定状态
DOMDisplay.prototype.syncState = function(state) {
  //如果之前有绘图，移除
  if (this.actorLayer) this.actorLayer.remove();
  //重新绘图
  this.actorLayer = drawActors(state.actors);//调用drawActors函数完成单位转化
  this.dom.appendChild(this.actorLayer);//appendChild()方法可向节点的子节点列表的末尾添加新的子节点。
  this.dom.className = `game ${state.status}`;//${}用于传值
  this.scrollPlayerIntoView(state);
};

//中心视窗的确定，自动滚屏，增强体验性
DOMDisplay.prototype.scrollPlayerIntoView = function(state) {
  let width = this.dom.clientWidth;
  let height = this.dom.clientHeight;
  let margin = width / 3;

  // The viewport
  let left = this.dom.scrollLeft, right = left + width;
  let top = this.dom.scrollTop, bottom = top + height;

  let player = state.player;
  let center = player.pos.plus(player.size.times(0.5)).times(scale);

  if (center.x < left + margin) {
    this.dom.scrollLeft = center.x - margin;
  } else if (center.x > right - margin) {
    this.dom.scrollLeft = center.x + margin - width;
  }
  if (center.y < top + margin) {
    this.dom.scrollTop = center.y - margin;
  } else if (center.y > bottom - margin) {
    this.dom.scrollTop = center.y + margin - height;
  }
};


//有关游戏状态
//当游戏结束的时候，state属性将会切换到won或者lost
//state用于更新状态
class State {
    constructor(level, actors, status) {
      this.level = level;
      this.actors = actors;
      this.status = status;
    }
  
    static start(level) {
      return new State(level, level.startActors, "playing");
    }
  
    get player() {
      return this.actors.find(a => a.type == "player");
    }
}
//封装一个函数，用时间差作为参数来绘制帧，当返回值为false的时候动画停止
function runAnimation(frameFunc) {
    let lastTime = null;
    function frame(time) {
      if (lastTime != null) {
        let timeStep = Math.min(time - lastTime, 100) / 1000;//100毫秒为最大帧长
        if (frameFunc(timeStep) === false) return;//当隐藏浏览器窗口时，返回值为false，动画停止
      }
      lastTime = time;//实际上lasttime和time的差值是隐藏浏览器窗口的总时间
      requestAnimationFrame(frame);
    }
    requestAnimationFrame(frame);
}

//封装函数
function runLevel(level, Display) {
    let display = new Display(document.body, level);
    let state = State.start(level);
    let ending = 1;
    return new Promise(resolve => {
      runAnimation(time => {
        state = state.update(time, arrowKeys);
        display.syncState(state);
        if (state.status == "playing") {
          return true;
        } else if (ending > 0) {
          ending -= time;
          return true;
        } else {
          display.clear();
          resolve(state.status);
          return false;
        }
      });
    });
}

function runGame(plans, Display) {

    //注意之前无条件执行过一条命

    var life = 4;

    function startLevel(n) {


        window.alert("Notice : 你现在有 " + (life + 1) + " 条命");

        runLevel(new Level(plans[n]), Display, function(status){

            console.log(1);

            if (status == "lost"){

                if(life-- > 0)

                    startLevel(n);

                else{

                    life = 2;

                    startLevel(0);

                }

            }

            else if (n < plans.length - 1)

                startLevel(n + 1);

            else

                console.log("You win!");

        });

    }

    startLevel(0);

}

//暂停游戏：按下ESC可以暂停和取消暂停游戏
function runLevel(level, Display) {
    let display = new Display(document.body, level);
    let state = State.start(level);
    let ending = 1;
    return new Promise(resolve => {
      runAnimation(time => {
        state = state.update(time, arrowKeys);
        display.syncState(state);
        if (state.status == "playing") {
          return true;
        } else if (ending > 0) {
          ending -= time;
          return true;
        } else {
          display.clear();
          resolve(state.status);
          return false;
        }
      });
    });
}


//防止页面因为按键抖动
function trackKeys(keys) {
    let down = Object.create(null);
    function track(event) {
      if (keys.includes(event.key)) {
        down[event.key] = event.type == "keydown";
        event.preventDefault();
      }
    }
    window.addEventListener("keydown", track);
    window.addEventListener("keyup", track);
    return down;
}
  
const arrowKeys = trackKeys(["ArrowLeft", "ArrowRight", "ArrowUp"]);

//运动与碰撞
//此方法确定矩形是否接触某给定类型的网络元素
Level.prototype.touches = function(pos, size, type) {
    var xStart = Math.floor(pos.x);
    var xEnd = Math.ceil(pos.x + size.x);
    var yStart = Math.floor(pos.y);
    var yEnd = Math.ceil(pos.y + size.y);
  
    for (var y = yStart; y < yEnd; y++) {
      for (var x = xStart; x < xEnd; x++) {
        let isOutside = x < 0 || x >= this.width ||
                        y < 0 || y >= this.height;
        let here = isOutside ? "wall" : this.rows[y][x];
        if (here == type) return true;
      }
    }
    return false;
};

//用于确定player是否正在触碰lava
State.prototype.update = function(time, keys) {
    let actors = this.actors
      .map(actor => actor.update(time, this, keys));
    let newState = new State(this.level, actors, this.status);
  
    if (newState.status != "playing") return newState;
  
    let player = newState.player;
    //用touch方法确定player是否正在触摸lava
    if (this.level.touches(player.pos, player.size, "lava")) {
      return new State(this.level, actors, "lost");
    }
  
    for (let actor of actors) {
      if (actor != player && overlap(actor, player)) {
        newState = actor.collide(newState);
      }
    }
    return newState;
};


//检测actor之间的重叠
function overlap(actor1, actor2) {
    return actor1.pos.x + actor1.size.x > actor2.pos.x &&
           actor1.pos.x < actor2.pos.x + actor2.size.x &&
           actor1.pos.y + actor1.size.y > actor2.pos.y &&
           actor1.pos.y < actor2.pos.y + actor2.size.y;
}

//检测actor之间的重叠
function overlap(actor1, actor2) {
    return actor1.pos.x + actor1.size.x > actor2.pos.x &&
           actor1.pos.x < actor2.pos.x + actor2.size.x &&
           actor1.pos.y + actor1.size.y > actor2.pos.y &&
           actor1.pos.y < actor2.pos.y + actor2.size.y;
}

Level.prototype.touches = function(pos, size, type) {
    var xStart = Math.floor(pos.x);
    var xEnd = Math.ceil(pos.x + size.x);
    var yStart = Math.floor(pos.y);
    var yEnd = Math.ceil(pos.y + size.y);
  
    for (var y = yStart; y < yEnd; y++) {
      for (var x = xStart; x < xEnd; x++) {
        let isOutside = x < 0 || x >= this.width || y < 0 || y >= this.height;
        let here = isOutside ? "wall" : this.rows[y][x];
        if (here == type) return true;
      }
    }
    return false;
};

runGame(GAME_LEVELS, DOMDisplay);

